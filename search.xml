<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[设计模式]]></title>
    <url>%2Fblog.github.io%2F2018%2F11%2F11%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉常用的设计模式可以让我们在读其他优秀源代码时不至于云里雾里，可以清晰地了解到作者的思路，更有助于提高自我的代码质量，下面记录我学习研磨设计模式一书中知识点，重在理解运用，详细代码不在博客中贴出，有需要参考可以查看GitHub 列表单例模式简单工厂模式原型模式工厂方法模式外观模式生成器模式适配器模式抽象工厂模式]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[目录结构和命令]]></title>
    <url>%2Fblog.github.io%2F2018%2F07%2F28%2F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%92%8C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;了解下maven的目录结构和几个基础命令、其中包含的maven的依赖管理等等内容用红色字体标注的部分不在本篇讲述，会单独起篇说明。 开始pom.xmlpom.xml是maven工程的最根本单元，包含了工程的各种重要信息。下面了解下这个文件中的具体信息： 123456789101112131415161718&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;my-app&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt;&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 参数说明：project pom.xml文件的最上层节点modelVersion pom对象的版本，一般不会变化groupId 组织id，一般使用组织域名artifactId 标记工程id,特别是在生成jar时，名称是artifactId-version.jar packaging 打包方式，取值为jar,war,ear，不指定的时候默认是jar;项目的指定打包可以在自定义构建生命周期中发挥作用version 版本，命名一般是版本数-SNAPSHOT或者版本数-RELEASE；前者表示处于开发版，后者是发行的正式版name 项目的名称，会在生成的maven文档中体现url 表示项目可以访问的网址，会在生成的maven文档中体现description 项目的基本描述，会在生成的maven文档中体现其他更详细的配置说明可以参考官方说明：http://maven.apache.org/ref/3.5.4/maven-model/maven.html 标准目录结构：除了上面的pom.xml文件外，maven还有其他目录文件：完整展示如下： 可能大家通过eclipse，新增maven工程，不会有这么多目录结构，这是我手动建立的，右键项目，在属性中建立完成后，可以对这些目录排序， 命令执行过程：目录建立了，程序也写好了，接下来如何编译呢？我们都知道编译的是java文件成class文件，那么这些编译好的class文件放在哪里呢？这个地方是可以配置的， 清理命令：1mvn clean 清理命令，做了扫描该路径下的工程，发现了my-app 1.0-release.jar，调用清理插件maven-clean-plugin来清理掉target下的所有文件 编译命令：1mvn compile 执行编译命令前，需要指定下编码方式，不设置编译的时候会有警告信息。因为编译的时候会调用相关插件来拷贝资源文件，编译文件，这些是需要指定编码方式的。这里配置下编码就解决了： 设定好编码后，调用编译命令：可以看到编译的过程，也是调用了2个插件来实现的。编译后的输出目录在target下面；这个过程在第一次执行的时候会花费时间来下载插件和依赖包文件。 测试命令：1mvn test 会执行编译和运行测试类 仅仅编译测试，不执行：1mvn test-compile 打包命令：1mvn package 做了拷贝main、编译main、拷贝test、编译test下文件、执行测试类、生成jar文件一般而言我们使用的都不会编译test,所以会执行下面的命令跳过测试目录 安装打包好的jar到本地资源库命令：1mvn install 这个命令会做package命令做的所有动作之外，还会将这个jar放到本地资源库中。 还有其他命令：生成站点信息的1mvn site 插件：上面这些命令执行的时候，都是调用的插件，具体有哪些插件，插件的作用，可以参考官网地址：http://maven.apache.org/plugins/ 插件如何配置，怎么自定义插件等等，在这里不做介绍，另起篇幅介绍 编译的生命周期本次也不做介绍，另起篇幅介绍 依赖管理本次也不做介绍，另起篇幅介绍]]></content>
      <categories>
        <category>maven指南</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018书单]]></title>
    <url>%2Fblog.github.io%2F2018%2F07%2F28%2F2018%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[在这里开书吧，列举每年看过和将要看的书，分享读书体会，以此共勉！ 金融的本质]]></content>
      <categories>
        <category>书吧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[maven安装和配置]]></title>
    <url>%2Fblog.github.io%2F2018%2F07%2F22%2Fmaven%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;借用官方的说法，Maven 概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。我借助于该网站学习到了maven，现在记录这个学习的过程与大家分享。 开始maven安装安装环境说明：Maven3.3以上需要JDK1.7以上1、下载安装jdk并配置好环境变量，这一步这里不做介绍2、下载安装并配置maven3.5.4,下载地址：http://maven.apache.org/download.cgi解压下载好的maven压缩包到任意目录配置系统变量验证是否按照成功以管理员身份运行cmd，输入命令，如果出现下面信息说明按照成功修改maven默认仓库为阿里仓库修改为国内仓库后，以后下载jar包会很快 Eclipse中添加安装好的maven 使用命令创建maven工程1、在任意目录下建立一个文件夹，用来存放工程2、使用cmd管理员身份运行，进入最后一条命令：mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false是会在选定的目录下创建一个my-app的maven项目，这个过程会下载需要的依赖文件。执行完毕后，出现下面提示： 将生产的项目导入到eclipse，用来查看下项目的目录结构： 重新回到cmd命令窗口，打包应用 可以看到，打包成功后在对应目录下生成了jar文件my-app-1.0-SNAPSHOT.jar这里我们来运行这个项目，执行下面的命令；命令由依赖的jar文件和程序的入库类组成 其他maven命令，可以查询官方手册了解： 结尾安装maven的过程还是很清晰的，没有特别注意的关注点，按照步骤完成即可，接下来的内容就是逐步深入了解maven了，我还是倾向于依照官方网站指引来学习。]]></content>
      <categories>
        <category>maven指南</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo的博客系统]]></title>
    <url>%2Fblog.github.io%2F2018%2F07%2F04%2F%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;借用官方的说法，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我借助于该网站按步骤搭建了现在你们看到的这个博客系统，以后我们写好的博客可以直接发布到这个系统上面去，简单自由，不用受制于其他第三方博客网站的约束。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面我将搭建的过程简单记录备用。 开始安装软件 Git、Node.js需要安装的软件有：Git、Node.js，我使用的是windos系统，所以这2个软件下载对应windows版本的软件就可以了，然后依次安装。 安装Hexo1、在本地磁盘中建立一个文件夹，并cd到该目录，我选的是E:\blog2、安装hexo命令：npm i -g hexo3、初始化命令：hexo init，执行完成之后，会在该目录下生成很多文件 github上注册账号，创建仓库这里需要注意repository name命名xxxxx.github.io 配置参数，编辑_config.yml1、本地启动参数 2、部署到github参数： 启动和发布1、本地预览启动1hexo clean 1hexo generate 1hexo server 2、发布到github 1hexo clean 1hexo generate 1hexo deploy 结尾以上就是我参考网上的资料，逐渐搭建完成的步骤，大概的步骤就是这样子的，最初的系统肯定很简陋，后续可以上网查找资料完善系统其它配置，比如主题，百度统计、评论等等，所以想着之后再写一篇来记录这个过程。]]></content>
      <categories>
        <category>Hexo系列</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog.github.io%2F2018%2F06%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
